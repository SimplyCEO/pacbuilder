#!/bin/sh

PROJECT_NAME=$(basename $0)
REPO_FOLDER="${HOME}/.cache/pacbuilder"
mkdir -p "${REPO_FOLDER}"

REPOSITORIES="https://gitea.artixlinux.org/packages https://gitlab.archlinux.org/archlinux/packaging/packages"

# core #

char()
{
  echo "$2" | cut -c $1
}

strncmp()
{
  if [ -z $1 ] || [ -z $2 ] || [ -z $3 ]; then echo 1; return 1; fi

  local c=1
  while [ $c -le $3 ]; do
    if [ $(char $c $1) != $(char $c $2) ]; then echo 1; return 1; fi
    c=$((c+1))
  done

  echo 0; return 0
}

strlen()
{
  echo "$1" | wc -c
}

# tools #

array()
{
  local index=$1; shift
  local string="$@"

  # Makeshift for loop: Built-in was not working.
  local array=""
  local count=0
  local i=0
  while [ $i -lt $(strlen "${string}") ]; do
    local c=$(char $((i+1)) "${string}")
    if [ "${c}" = " " ]; then
      if [ $count -eq $index ]; then echo "${array}"; return 0; fi
      array=""
      count=$((count+1))
    else
      array="${array}${c}"
    fi

    i=$((i+1))
  done

  return 1
}

# pacbuilder #

fhelp()
{
  local EXTRA_FLAG=$1

  if [ $(strncmp "${EXTRA_FLAG}" "-h" 2) = 0 ] || [ $(strncmp "${EXTRA_FLAG}" "--help" 6) = 0 ]; then
    printf "usage:  ${PROJECT_NAME} {-B --build} [options] [package(s)]\n \
      \roptions:\n \
      \r  -u, --upgrade        clean and upgrade the contents of each package.\n \
      \r      --clean          clean the contents of each given package.\n \
      \r      --list           list the existing packages from the build directory\n \
      \r                       or their contents, if provided name.\n \
      \r      --edit           edit PKGBUILD before compiling.\n \
      \r                       the modification will be stored as a patch file.\n \
      \r"
  else
    pacman --help | head -n 11 | sed "s/pacman/${PROJECT_NAME}/g"
    printf "    ${PROJECT_NAME} {-B --build}    [options] [package(s)]\n\n"
    pacman --help | tail -n 1 | sed "s/pacman/${PROJECT_NAME}/g"
  fi

  return 0
}

fversion()
{
  printf "\r  .--.                  Pacbuilder v0.0.3\n \
          \r / _.-' .-.  .-.  .-.   Copyright (C) 2025 SimplyCEO <simplyceo.developer@gmail.com>\n \
          \r \\  '-. '-'  '-'  '-'\n \
          \r  '--'\n \
          \r                        This application may be freely redistributed under\n \
          \r                        the terms of the Open Software License 3.0.\n"

  return 0
}

list_clone_directory()
{
  local PACKAGE=$1
  local SILENT=$2

  if [ ! -z $SILENT ] && [ $SILENT -eq 1 ]; then
    if [ -z "${PACKAGE}" ]; then
      if [ -d "${REPO_FOLDER}" ]; then return 0; else return 1; fi
    else
      if [ -d "${REPO_FOLDER}/${PACKAGE}" ]; then return 0; else return 1; fi
    fi
  else
    if [ -z "${PACKAGE}" ]; then
      ls "${REPO_FOLDER}"
    else
      ls "${REPO_FOLDER}/${PACKAGE}" 2>/dev/null
    fi
  fi

  return $?
}

get_editor()
{
  if [ -z $EDITOR ]; then
    local EDITOR_ARRAY="vim vi nano neovim ed"
    for editor in ${EDITOR_ARRAY}; do
      if which $editor >/dev/null 2>&1; then echo $editor; return 0; fi
    done
  else
    return 0
  fi

  return 1
}

install_package()
{
  local PACKAGE=$1

  cd "${REPO_FOLDER}/${PACKAGE}"
  printf "\033[1;34m::\033[0m \033[1mPackage built successfully, installing... "
  su -c "pacman -U *.pkg.tar.* && mv *.pkg.tar.* /var/cache/pacman/pkg"

  return 0
}

build_package()
{
  local PACKAGE=$1

  cd "${REPO_FOLDER}/${PACKAGE}"
  for data in $(/bin/ls); do
    if [ "${data}" = "PKGBUILD.patch" ]; then
      patch -N PKGBUILD < PKGBUILD.patch > /dev/null 2>&1
      makepkg -g >> PKGBUILD
    fi
  done
  makepkg -s --skippgpcheck

  return $?
}

clean_package()
{
  local PACKAGE=$1

  if [ ! -z "${PACKAGE}" ]; then
    cd "${REPO_FOLDER}/${PACKAGE}"
    rm -rf src/*build*
    cd -
  else
    printf "\033[1;33m::\033[0m \033[1mWARNING: No packages given to be cleaned. Do you want to clean the entire folder? [y/N] \033[0m\n"
    DEFAULT_RESPONSE="n"
    read RESPONSE
    if [ -z "${RESPONSE}" ]; then RESPONSE="${DEFAULT_RESPONSE}"; fi
    case "${RESPONSE}" in
      N|n|no)
        exit 1
        ;;
      Y|y|yes)
        cd "${REPO_FOLDER}"
        for folder in $(/bin/ls); do
          rm -rf "${folder}"
        done
        cd -
        ;;
      *)
        exit 1
        ;;
    esac
  fi

  return 0
}

clone_package()
{
  local PACKAGE=$1
  local UPGRADE=$2

  if [ ! -f "${REPO_FOLDER}/${PACKAGE}/PKGBUILD" ]; then
    printf "\033[1;34m::\033[0m \033[1mAttempting to download ${PACKAGE}...\033[0m\n"

    for GITURL in "${REPOSITORIES}"; do
      GIT_TERMINAL_PROMPT=0 git clone ${GITURL}/${PACKAGE}.git ${REPO_FOLDER}/${PACKAGE} >/dev/null 2>&1
    done

    if [ ! -d "${REPO_FOLDER}/${PACKAGE}" ]; then
      printf "\033[1;33m::\033[0m \033[1mWARNING: ${PACKAGE} not found in any of the repositories! Skipping...\033[0m\n"
      return 1
    fi

    printf "\033[1;32m::\033[0m \033[1m${PACKAGE} was succesfully downloaded. Building...\033[0m\n"
  else
    printf "\033[1;34m::\033[0m \033[1m${PACKAGE} already exists. Building...\033[0m\n"

    # Update repository
    cd "${REPO_FOLDER}/${PACKAGE}"

    git restore .
    if [ ! -z $UPGRADE ] && [ $UPGRADE -eq 1 ]; then git pull; fi
    cd -
  fi

  return 0
}

edit_package()
{
  local PACKAGE=$1

  if [ ! -z "${PACKAGE}" ]; then
    cd "${REPO_FOLDER}/${PACKAGE}"
    SKIP_EDIT=0
    if [ -f "PKGBUILD.patch" ]; then
      printf "\033[1;33m::\033[0m \033[1mWARNING: A patch file for PKGBUILD has been found. What do you want to do? [DELETE/read/skip]\033[0m\n"
      DEFAULT_RESPONSE="delete"
      read RESPONSE
      if [ -z "${RESPONSE}" ]; then RESPONSE="${DEFAULT_RESPONSE}"; fi
      case "${RESPONSE}" in
        skip)
          SKIP_EDIT=1
          ;;
        read)
          SKIP_EDIT=1
          patch -N PKGBUILD < PKGBUILD.patch > /dev/null 2>&1
          cat PKGBUILD | less
          ;;
        delete)
          rm -f PKGBUILD.patch
          ;;
        *)
          rm -f PKGBUILD.patch
          ;;
      esac
    fi

    if [ $SKIP_EDIT -eq 0 ]; then
      git restore PKGBUILD
      cp PKGBUILD PKGBUILD.editor
      local EDITOR=get_editor
      if [ $? -eq 0 ]; then
        $EDITOR PKGBUILD.editor
        if [ ! -z "$(diff PKGBUILD PKGBUILD.editor)" ]; then
          diff PKGBUILD PKGBUILD.editor > PKGBUILD.patch
          printf "\033[1;32m::\033[0m \033[1mA patch for PKGBUILD has succesfully been created.\033[0m\n"
        fi
        rm PKGBUILD.editor
      fi
    fi
    cd -
  else
    return 1
  fi

  return 0
}

run_pacman()
{
  pacman $@
}

upgrade_packages()
{
  list_clone_directory "$1" 1
  if [ $? -eq 0 ]; then
    clean_package "$1"
    clone_package "$1" 1
    if [ $? -ne 1 ]; then
      build_package "$1"
      if [ $? -eq 0 ]; then install_package "$1"; fi
    fi
  fi
}

if [ $# -lt 1 ]; then fhelp; exit 1; fi

OPTIONS="$@"
case $(array 0 "${OPTIONS}") in
  -h|--help) fhelp; shift ;;
  -V|--version) fversion; shift ;;
  -B|-Bu|--build)
    if [ $# -lt 2 ]; then fhelp; exit 1; fi

    shift
    EXTRA_OPTION="$1"

    case "${EXTRA_OPTION}" in
    --clean|--edit|--list|--upgrade)
      shift
      EXTRA_PACKAGES="$1"
      if [ ! -z "${EXTRA_PACKAGES}" ]; then
        for package in "$@"; do
          # List packages from clone directory.
          if [ $(strncmp "${EXTRA_OPTION}" "--list" 6) = 0 ]; then
            list_clone_directory "${package}"
            if [ $? -ne 0 ]; then printf "\033[1;31m::\033[0m \033[1mERROR: ${package} package not found in clone directory.\n"; exit 1; fi
          # Clean package directory.
        elif [ $(strncmp "${EXTRA_OPTION}" "--clean" 7) = 0 ]; then
            list_clone_directory "${package}" 1
            if [ $? -eq 0 ]; then clean_package "${package}"; fi
          elif [ $(strncmp "${EXTRA_OPTION}" "--edit" 6) = 0 ]; then
            clone_package "${package}"
            if [ $? -ne 1 ]; then
              edit_package "${package}"
              build_package "${package}"
              if [ $? -eq 0 ]; then install_package "${package}"; fi
            fi
          elif [ $(strncmp "${EXTRA_OPTION}" "--upgrade" 9) = 0 ]; then
            upgrade_packages "${package}"
          fi
        done
        exit 0
      fi

      # Clean packages directory.
      if [ $(strncmp "${EXTRA_OPTION}" "--clean" 7) = 0 ]; then
        list_clone_directory "" 1
        if [ $? -eq 0 ]; then clean_package; fi
        exit 0
      fi

      list_clone_directory
      exit 0
      ;;
    # Provide help for building.
    -h|--help)
      fhelp "${EXTRA_OPTION}"
      exit 0
      ;;
    esac

    PACKAGES="$@"
    ;;
  *) run_pacman "$@"; break ;;
esac

if [ ! -z "${PACKAGES}" ]; then
  for PKG in "${PACKAGES}"; do
    case $(array 0 "${OPTIONS}") in
      -B|--build)
        clone_package "${PKG}"
        if [ $? -ne 1 ]; then
          build_package "${PKG}"
          if [ $? -eq 0 ]; then install_package "${PKG}"; fi
        fi
        ;;
      -Bu)
        upgrade_packages "${PKG}"
        ;;
    esac
  done
fi

