#!/bin/sh

PROJECT_NAME=$(basename $0)
REPO_FOLDER="${HOME}/.cache/pacbuilder"
mkdir -p "${REPO_FOLDER}"

REPOSITORIES=(
  "https://gitea.artixlinux.org/packages"
  "https://gitlab.archlinux.org/archlinux/packaging/packages"
)

fhelp()
{

  pacman --help | head -n 11 | sed "s/pacman/${PROJECT_NAME}/g"
  printf "    ${PROJECT_NAME} {-B --build}    [package(s)]\n\n"
  pacman --help | tail -n 1 | sed "s/pacman/${PROJECT_NAME}/g"

  return 0
}

fversion()
{
  printf "\r  .--.                  Pacbuilder v0.0.1\n \
          \r / _.-' .-.  .-.  .-.   Copyright (C) 2025 SimplyCEO <simplyceo.developer@gmail.com>\n \
          \r \\  '-. '-'  '-'  '-'\n \
          \r  '--'\n \
          \r                        This application may be freely redistributed under\n \
          \r                        the terms of the Open Software License 3.0.\n"

  return 0
}

install_package()
{
  local PACKAGE=$1

  cd "${REPO_FOLDER}/${PACKAGE}"
  printf "\033[1;34m::\033[0m \033[1mPackage built successfully, installing... "
  su -c "pacman -U *.pkg.tar.* && mv *.pkg.tar.* /var/cache/pacman/pkg"

  return 0
}

build_package()
{
  local PACKAGE=$1

  cd "${REPO_FOLDER}/${PACKAGE}"
  makepkg -s --skippgpcheck

  return $?
}

clone_package()
{
  local PACKAGE=$1

  if [ ! -f "${REPO_FOLDER}/${PACKAGE}/PKGBUILD" ]; then
    printf "\033[1;34m::\033[0m \033[1mAttempting to download ${PACKAGE}...\033[0m\n"

    for GITURL in "${REPOSITORIES[@]}"; do
      GIT_TERMINAL_PROMPT=0 git clone ${GITURL}/${PACKAGE}.git ${REPO_FOLDER}/${PACKAGE} >/dev/null 2>&1
    done

    if [ ! -d "${REPO_FOLDER}/${PACKAGE}" ]; then
      printf "\033[1;33m::\033[0m \033[1mWARNING: ${PACKAGE} not found in any of the repositories! Skipping...\033[0m\n"
      return 1
    fi

    printf "\033[1;32m::\033[0m \033[1m${PACKAGE} was succesfully downloaded. Building...\033[0m\n"
  else
    printf "\033[1;34m::\033[0m \033[1m${PACKAGE} already exists. Building...\033[0m\n"

    # Update repository
    pushd "${REPO_FOLDER}/${PACKAGE}"
    for data in $(/bin/ls); do
      if [ "${data%.*}" != "PKGBUILD" ]; then
        rm -r "${data}"
      fi
    done

    git restore .
    git pull

    for data in $(/bin/ls); do
      if [ "${data}" = "PKGBUILD.patch" ]; then
        patch -N PKGBUILD < PKGBUILD.patch > /dev/null 2>&1
      fi
    done
    popd
  fi

  return 0
}

run_pacman()
{
  pacman $@
}

if [ $# -lt 1 ]; then fhelp; exit 1; fi

OPTIONS=("$@")
case "${OPTIONS[0]}" in
  -h|--help) fhelp; shift ;;
  -V|--version) fversion; shift ;;
  -B|--build)
    if [ $# -lt 2 ]; then fhelp; exit 1; fi

    shift
    PACKAGES=("$@")
    ;;
  *) run_pacman "$@"; break ;;
esac

if [ ! -z "${PACKAGES}" ]; then
  for PKG in "${PACKAGES[@]}"; do
    clone_package "${PKG}"
    if [ $? -ne 1 ]; then
      build_package "${PKG}"
      if [ $? -eq 0 ]; then install_package "${PKG}"; fi
    fi
  done
fi

